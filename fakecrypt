#!/bin/bash

# DEFAULT DIRECTORIES STRUCTURE
APP_DIR=~
DOMAIN=vcap.me
ROOT_CA_DIR=${APP_DIR}/fakecrypt/rootCA
CA_DIR=${APP_DIR}/fakecrypt/CA
CERTS_DIR=${APP_DIR}/fakecrypt/certs

# DEFAULT CERTIFICATE VALUES
countryName="CA"
localityName="Alert"
commonName="FakeCrypt Root CA"
caOrganizationName="FakeCrypt"
caOrganizationalUnitName="FakeCrypt Signatures"
caCommonName="FakeCrypt CA"

function create_root_cfg()
{
    cat > ${ROOT_CA_DIR}/root-csr.conf << EOF
[ req ]
encrypt_key = no
utf8 = yes
string_mask = utf8only
prompt=no
distinguished_name = root_dn
x509_extensions = extensions
[ root_dn ]
# Country Name (2 letter code)
countryName = ${countryName}
# Locality Name (for example, city)
localityName = ${localityName}
# Organization Name (for example, company)
0.organizationName = ${commonName}
# Name for the certificate
commonName = ${commonName}
[ extensions ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier = hash
EOF

  cat > ${CA_DIR}/rootCA.conf << EOF
[ ca ]
default_ca = the_ca
[ the_ca ]
dir = ${ROOT_CA_DIR}
private_key = \$dir/private/rootCA.key
certificate = \$dir/rootCA.crt
new_certs_dir = \$dir/certs
serial = \$dir/db/crt.srl
database = \$dir/db/db
default_md = sha256
policy = policy_any
email_in_dn = no
[ policy_any ]
domainComponent = optional
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = optional
emailAddress = optional
[ ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
EOF
}

function create_ca_cfg()
{
  cat > ${CA_DIR}/CA-csr.conf << EOF
[ req ]
encrypt_key = no
default_bits = 2048
default_md = sha256
utf8 = yes
string_mask = utf8only
prompt = no
distinguished_name = ca_dn
[ ca_dn ]
0.organizationName = "${caOrganizationName}"
organizationalUnitName = "${caOrganizationalUnitName}"
commonName = "${caCommonName}"
EOF

  cat > ${CERTS_DIR}/CA.conf << EOF
[ ca ]
default_ca = the_ca
[ the_ca ]
dir = ${CA_DIR}
private_key = \$dir/private/CA.key
certificate = \$dir/CA.crt
new_certs_dir = \$dir/certs
serial = \$dir/db/crt.srl
database = \$dir/db/db
unique_subject = no
default_md = sha256
policy = any_pol
email_in_dn = no
copy_extensions = copy
[ any_pol ]
domainComponent = optional
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = optional
emailAddress = optional
[ leaf_ext ]
keyUsage = critical,digitalSignature,keyEncipherment
basicConstraints = CA:false
extendedKeyUsage = serverAuth,clientAuth
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
[ ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:0
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
EOF
}

function create_domain_cfg()
{
  cat > ${CERTS_DIR}/${DOMAIN}/${DOMAIN}-csr.conf << EOF
[ req ]
default_bits = 2048
encrypt_key = no
default_md = sha256
utf8 = yes
string_mask = utf8only
prompt = no
distinguished_name = server_dn
req_extensions = server_reqext
[ server_dn ]
commonName = *.$DOMAIN 
[ server_reqext ]
keyUsage = critical,digitalSignature,keyEncipherment
extendedKeyUsage = serverAuth,clientAuth
subjectKeyIdentifier = hash
subjectAltName = @alt_names
[alt_names]
DNS.1 = *.$DOMAIN
DNS.2 = *.m.$DOMAIN
DNS.3 = $DOMAIN
EOF
}

# $1 text to show - $2 default value
function read_value ()
{
  read -p "${1} [${2}]: " READ_VALUE
  if [ "${READ_VALUE}" = "" ]
  then
    READ_VALUE=$2
  fi
}


function paint_header ()
{
  echo
  echo "${1}"
  echo "------------------------------------------------------------------"
}

function create_ca ()
{
  # Check if exist previous CA
  FILE=${ROOT_CA_DIR}/private/rootCA.key
  if [ -f "$FILE" ]; then
    read -p "A previous CA allreay exist. This will delete previous CA. Continue? (y/N): " READ_VALUE

    if [ "${READ_VALUE}" = "y" ]
    then
      rm -rf ${CA_DIR}
      rm -rf ${ROOT_CA_DIR}
      rm -rf ${CERTS_DIR}
    else
      echo "Done!."
      exit 0
    fi
  fi

  # Create estucture directory
  mkdir -p ${ROOT_CA_DIR}/{certs,db,private}
  chmod 700 ${ROOT_CA_DIR}/private
  touch ${ROOT_CA_DIR}/db/db
  touch ${ROOT_CA_DIR}/db/db.attr
  mkdir -p ${CA_DIR}/{certs,db,private}
  chmod 700 ${CA_DIR}/private
  touch ${CA_DIR}/db/db
  touch ${CA_DIR}/db/db.attr
  mkdir ${CERTS_DIR}

  # ASK CONFIG VALUES
  read_value "Country Name" "${countryName}"
  countryName=${READ_VALUE}
  read_value "City Name" "${localityName}"
  localityName=${READ_VALUE}
  read_value "Root Common Name" "${commonName}"
  commonName=${READ_VALUE}
  read_value "CA Organization Name" "${caOrganizationName}"
  caOrganizationName=${READ_VALUE}
  read_value "CA Name" "${caOrganizationalUnitName}"
  caOrganizationalUnitName=${READ_VALUE}
  read_value "CA Common Name" "${caCommonName}"
  caCommonName=${READ_VALUE}

  # Create configuration files
  create_root_cfg
  create_ca_cfg

  # CREATE ROOT CA CERTIFICATE
  openssl req -x509 -sha256 -days 36500 -newkey rsa:3072 \
      -config ${ROOT_CA_DIR}/root-csr.conf -keyout ${ROOT_CA_DIR}/private/rootCA.key \
      -out ${ROOT_CA_DIR}/rootCA.crt
  # SHOW CERTIFICATE CREATED
  openssl x509 -in ${ROOT_CA_DIR}/rootCA.crt -text -noout   
  #  create a certificate signing request
  openssl req -new -config ${CA_DIR}/CA-csr.conf -out ${CA_DIR}/CA.csr \
          -keyout ${CA_DIR}/private/CA.key
  # sign the certificate in the request with the root certificate
  openssl ca -batch -config ${CA_DIR}/rootCA.conf -days 36500 -create_serial \
      -in ${CA_DIR}/CA.csr -out ${CA_DIR}/CA.crt -extensions ca_ext -notext
  # Link certificates together to have the certificate chain in one file
  cat ${CA_DIR}/CA.crt ${ROOT_CA_DIR}/rootCA.crt >${CA_DIR}/CA.pem
}

function check_ca()
{
  # Check if exist CA 
  FILE=${CERTS_DIR}/CA.conf
  if [ ! -f "$FILE" ]; then
    read -p "CA Authority don't exist. Create a new One? (Y/n): " READ_VALUE
    if [ "${READ_VALUE}" = "n" ]
    then
      echo "You need create a CA Authority first."
      exit 0
    else
      create_ca
    fi
  fi
}


function create_cert()
{
  

  # Read Domain Name
  if [ -z "${1}" ]
  then
    read_value "Domain Name" "${DOMAIN}"
    DOMAIN=${READ_VALUE}
  else
    DOMAIN=${1}
  fi

  # Create directory and config file
  mkdir -p ${CERTS_DIR}/${DOMAIN}
  create_domain_cfg
  # create a certificate signing request
  openssl req -new -config ${CERTS_DIR}/${DOMAIN}/${DOMAIN}-csr.conf -out ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.csr \
          -keyout ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.key
  # sign the server certificate in the request with the intermediate CA certificate
  openssl ca -batch -config ${CERTS_DIR}/CA.conf -days 36500 -create_serial \
      -in ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.csr -out ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.crt -extensions leaf_ext -notext
  # Link certificates together to have the certificate chain in one file
  cat ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.crt ${CA_DIR}/CA.pem >${CERTS_DIR}/${DOMAIN}/${DOMAIN}.pem

  # make sure that the DNS entries for SAN are correct
  
  paint_header "DNS registered in Domain Certificate"
  openssl x509 -in ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.crt -text -noout | grep DNS
  paint_header "use: 'fakecrypt cert view ${DOMAIN}' to view domain certificate"
}

########################
#         MAIN         #
########################

check_ca

if [ -z "${1}" ]
then
  create_cert
  exit 0
fi

if [ "${1}" = "root" ];
then

  if [ "${2}" = "crt" ];
  then
    cat ${ROOT_CA_DIR}/rootCA.crt
  elif  [ "${2}" = "view" ];
  then
    paint_header "Root CA Certificate Info"
    openssl x509 -in ${ROOT_CA_DIR}/rootCA.crt -text -noout
  elif  [ "${2}" = "reset" ];
  then
    create_ca 
  else    
    echo "usage: fakecript root [command]"
    echo "avaliable commands:"
    echo "* crt  Show Root CA raw crt data"
    echo "* view Show Root CA certificate"
    echo "* reset  Remove Root CA and signed certificates form system. Use with caution"
  fi
elif [ "${1}" = "ca" ];
then

  if [ "${2}" = "crt" ];
  then
    cat ${CA_DIR}/CA.crt
  elif [ "${2}" = "pem" ];
  then
    cat ${CA_DIR}/CA.pem
  elif [ "${2}" = "view" ];
  then
    paint_header "Intermediate CA Certificate Info"
    openssl x509 -in ${CA_DIR}/CA.crt -text -noout
  else    
    echo "usage: fakecript ca [command]"
    echo "avaliable commands:"
    echo "* crt  Show Intermediate CA raw crt data"
    echo "* pem  Show Intermediate CA raw pem data"
    echo "* view  Show Intermediate CA certificate"
  fi
elif [ "${1}" = "cert" ];
then
  DOMAIN=${3}
  if [ "${2}" = "create" ];
  then  
    create_cert ${3} 
  elif [ "${2}" = "list" ];
  then
    paint_header "Avaliable Domain Certificates"
    cd ${CERTS_DIR}
    for i in $(ls -d */); do echo "* ${i%%/}"; done
  elif [ "${2}" = "view" ];
  then    
    paint_header "${DOMAIN} Certificate Info"
    openssl x509 -in ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.crt -text -noout
  elif [ "${2}" = "crt" ];
  then    
    cat ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.crt
  elif [ "${2}" = "pem" ];
  then    
    cat ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.pem
  elif [ "${2}" = "key" ];
  then    
    cat ${CERTS_DIR}/${DOMAIN}/${DOMAIN}.key
  else    
    echo "usage: fakecript cert [command] [domain.name]"
    echo "avaliable commands:"
    echo "* create [domain]  Create a new domain certificate"
    echo "* list  List all domain certificates"
    echo "* view [domain] Show domain certificate"
    echo "* crt [domain] Show domain raw crt data"
    echo "* pem [domain] Show domain raw pem data"
    echo "* key [domain] Show domain raw key data"
  fi
elif [ "${1}" = "--help" ];
then
  echo "usage: fakecript [option] [command] [parameter]"
  echo "avaliable options:"
  echo "* root  manage Root CA Info"
  echo "* ca  manage Intermediate CA Info"
  echo "* cert  manage host certificates"
  echo "use 'fakecrypt [option] --help' to see options commands"
fi